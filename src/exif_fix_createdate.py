#!/usr/bin/env python3

import argparse
import os
import subprocess
import glob
import re


def process_txt_file_from_detection_tool(dry_run: bool) -> tuple[int, int]:
    """
    Process all text files generated by exif_detect_wrong_createdate.py
    and fix the CreateDate metadata using exiftool.
    If dry_run is True, do not make any changes, just print what would be done.
    """

    nprocessed_successfully = 0
    nprocessed_failed = 0

    # Match all files like 1999_non_matching_files.txt
    for txt_file in glob.glob("*_non_matching_files.txt"):
        match = re.match(r"(\d{4})_non_matching_files\.txt", txt_file)
        if not match:
            print(f"⚠️ Skipping file with unexpected name format: {txt_file}")
            continue

        year = match.group(1)
        print(f"Processing {txt_file} for year {year}")

        with open(txt_file, "r", encoding="utf-8") as f:
            files = [line.strip() for line in f if line.strip()]

        for file_path in files:
            if not os.path.exists(file_path):
                print(f"⚠️ File not found: {file_path}")
                nprocessed_failed += 1
                continue

            # Run exiftool to set all metadata tags associated with the IMAGE CREATION to
            # a valid date for the specified year (YYYY:01:01 00:00:00 by default)
            create_date = f"{year}:01:01 00:00:00"
            cmd = [
                "exiftool", "-overwrite_original", 
                f"-DateTimeOriginal={create_date}", 
                f"-CreateDate={create_date}", 
                f"-DateCreated={create_date}", 
                file_path
            ]

            if dry_run:
                print(f"DRY-RUN: Would run command: {' '.join(cmd)}")
                nprocessed_successfully += 1
            else:
                try:
                    subprocess.run(cmd, check=True)
                    print(f"✔ Updated {file_path} with CreateDate={create_date}")
                    nprocessed_successfully += 1
                except subprocess.CalledProcessError as e:
                    print(f"❌ Failed to update {file_path}: {e}")
                    nprocessed_failed += 1

    return nprocessed_successfully, nprocessed_failed

def main():
    parser = argparse.ArgumentParser(
        description="Use 'exiftool' to fix CreateDate metadata in a list of files."
    )
    parser.add_argument("--dry-run", action="store_true", help="Run without making any destructive changes")

    args = parser.parse_args()
    succ, fail = process_txt_file_from_detection_tool(args.dry_run)
    print(f"\nProcessing complete. Successfully processed {succ} files; {fail} files failed.")

if __name__ == "__main__":
    main()